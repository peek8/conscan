package models

import (
	"strings"
	"time"

	"peek8.io/conscan/pkg/utils"
)

const (
	SeverityNameUnknown    = "UNKNOWN"
	SeverityNameLow        = "LOW"
	SeverityNameMedium     = "MEDIUM"
	SeverityNameHigh       = "HIGH"
	SeverityNameCritical   = "CRITICAL"
	SeverityNameNegligible = "NEGLIGIBLE"
)

// DetectedVulnerability holds the information of detected vulnerabilities
type DetectedVulnerability struct {
	VulnerabilityID  string `json:",omitempty"`
	PkgID            string `json:",omitempty"` // It is used to construct dependency graph.
	PkgName          string `json:",omitempty"`
	InstalledVersion string `json:",omitempty"`
	FixedVersion     string `json:",omitempty"`
	Status           string `json:",omitempty"`
	DataSourceURL    string `json:",omitempty"`

	// Vulnerability details
	Title       string `json:",omitempty"`
	Description string `json:",omitempty"`
	Severity    string `json:",omitempty"` // Selected from VendorSeverity, depending on a scan target
	// only to be used for sorting
	SeverityInt Severity `json:"_,omitempty"`
	CweIDs      []string `json:",omitempty"` // e.g. CWE-78, CWE-89
	//VendorSeverity   VendorSeverity `json:",omitempty"`
	CvssScore        float64    `json:",omitempty"`
	CvssVector       string     `json:",omitempty"`
	References       []string   `json:",omitempty"`
	PublishedDate    *time.Time `json:",omitempty"` // Take from NVD
	LastModifiedDate *time.Time `json:",omitempty"` // Take from NVD
}

func (dv *DetectedVulnerability) FromGrypeVuln(gVuln DetectedVulnerability) DetectedVulnerability {
	dv.CvssScore = gVuln.CvssScore
	dv.Severity = gVuln.Severity
	dv.DataSourceURL = gVuln.DataSourceURL

	return *dv
}

func (dv *DetectedVulnerability) FromTrivyVuln(tVuln DetectedVulnerability) DetectedVulnerability {
	dv.Title = utils.IfEmptyStr(tVuln.Title, dv.Title)
	dv.Description = utils.IfEmptyStr(tVuln.Description, dv.Description)

	return *dv
}

// Severity
const (
	UnknownSeverity Severity = iota
	NegligibleSeverity
	LowSeverity
	MediumSeverity
	HighSeverity
	CriticalSeverity
)

var matcherTypeStr = []string{
	"unknown", // "unknown severity",
	"negligible",
	"low",
	"medium",
	"high",
	"critical",
}

func AllSeverities() []Severity {
	return []Severity{
		NegligibleSeverity,
		LowSeverity,
		MediumSeverity,
		HighSeverity,
		CriticalSeverity,
	}
}

type Severity int

type Severities []Severity

func (f Severity) String() string {
	if int(f) >= len(matcherTypeStr) || f < 0 {
		return matcherTypeStr[0]
	}

	return matcherTypeStr[f]
}

func ParseSeverity(severity string) Severity {
	switch strings.ToLower(severity) {
	case NegligibleSeverity.String():
		return NegligibleSeverity
	case LowSeverity.String():
		return LowSeverity
	case MediumSeverity.String():
		return MediumSeverity
	case HighSeverity.String():
		return HighSeverity
	case CriticalSeverity.String():
		return CriticalSeverity
	default:
		return UnknownSeverity
	}
}
