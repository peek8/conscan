package scanner

import (
	"encoding/json"
	"fmt"
	"log"

	trivytypes "github.com/aquasecurity/trivy/pkg/types"
	"peek8.io/conscan/pkg/grypemodels"
	"peek8.io/conscan/pkg/models"
	"peek8.io/conscan/pkg/utils"
)

func ScanVuln(imageTag string) (*models.CMDVulneResult, error) {
	tr, err := scanTrivyVuln(imageTag)
	if err != nil {
		return nil, err
	}
	
	gr, err := scanGrypeVuln(imageTag)
	if err != nil {
		return nil, err
	}

	return &models.CMDVulneResult{
		TrivyResult: &tr,
		GrypeResult: &gr,
	}, nil 
}

func scanTrivyVuln(imageTag string) (trivytypes.Report, error) {
	// run the trivy scan
	output, err, errStr := utils.ExecuteCommand("trivy", utils.TrivyVulnScanCmdArgs(imageTag)...)

	if err != nil {
		log.Fatalf("Command execution failed: %v\nStderr: %s", err, errStr)
	}

	var report trivytypes.Report
	err = json.Unmarshal([]byte(output), &report)
	if err != nil {
		log.Fatalf("Error unmashalling error %v", err)
	}

	fmt.Printf("Json parsed trivy %s",  report.Metadata.ImageID)
	fmt.Printf("Json parsed trivy %s",  report.Results[0].Vulnerabilities[0].VulnerabilityID)

	return report, err
}

func scanGrypeVuln(imageTag string) (grypemodels.Document, error) {
	// run the gruype scan
	output, err, errStr := utils.ExecuteCommand("grype", utils.GrypeVulnScanCmdArgs(imageTag)...)

	if err != nil {
		log.Fatalf("Command execution failed: %v\nStderr: %s", err, errStr)
	}

	var document grypemodels.Document
	err = json.Unmarshal([]byte(output), &document)
	if err != nil {
		log.Fatalf("Error unmashalling error %v", err)
	}

	//fmt.Printf("Json parsed grype %s",  document.Matches[0].Vulnerability.ID)
	//fmt.Printf("Json parsed grype %s",  document.Matches[0].RelatedVulnerabilities[0].Description)

	return document, nil
}
